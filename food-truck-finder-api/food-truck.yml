AWSTemplateFormatVersion: '2010-09-09'
Description: 'Food Truck Finder API - Lambda + API Gateway'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # IAM Role for Lambda
  FoodTruckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'FoodTruckLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: InternetAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function
  FoodTruckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'food-truck-finder-${Environment}'
      Runtime: nodejs20.x
      Handler: index.handler
      Role: !GetAtt FoodTruckLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          const https = require('https');
          const { URL } = require('url');

          /**
           * AWS Lambda handler for food truck location service
           * 
           * Expected query parameters:
           * - lat: latitude (required)
           * - lon: longitude (required) 
           * - radius: search radius in miles (optional, default: 1)
           * - limit: max number of results (optional, default: 20)
           */
          exports.handler = async (event, context) => {
              try {
                  // Parse query parameters
                  const queryParams = event.queryStringParameters || {};
                  
                  // Validate required parameters
                  if (!queryParams.lat || !queryParams.lon) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              error: 'Missing required parameters: lat and lon'
                          })
                      };
                  }
                  
                  let userLat, userLon, radius, limit;
                  
                  try {
                      userLat = parseFloat(queryParams.lat);
                      userLon = parseFloat(queryParams.lon);
                      radius = parseFloat(queryParams.radius || '1.0'); // Default 1 mile
                      limit = parseInt(queryParams.limit || '20');
                      
                      if (isNaN(userLat) || isNaN(userLon) || isNaN(radius) || isNaN(limit)) {
                          throw new Error('Invalid number format');
                      }
                  } catch (error) {
                      return {
                          statusCode: 400,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              error: 'Invalid parameter format. lat, lon, and radius must be numbers'
                          })
                      };
                  }
                  
                  // Fetch food truck data from SF Open Data API
                  const sfDataUrl = new URL('https://data.sfgov.org/resource/jjew-r69b.json');
                  sfDataUrl.searchParams.append('$limit', '1000');
                  sfDataUrl.searchParams.append('$where', 'latitude IS NOT NULL AND longitude IS NOT NULL');
                  
                  const foodTrucksData = await fetchData(sfDataUrl.toString());
                  
                  // Filter food trucks within radius
                  const nearbyTrucks = [];
                  
                  for (const truck of foodTrucksData) {
                      if (!truck.latitude || !truck.longitude) {
                          continue;
                      }
                      
                      try {
                          const truckLat = parseFloat(truck.latitude);
                          const truckLon = parseFloat(truck.longitude);
                          
                          if (isNaN(truckLat) || isNaN(truckLon)) {
                              continue;
                          }
                          
                          // Calculate distance using Haversine formula
                          const distance = haversineDistance(userLat, userLon, truckLat, truckLon);
                          
                          if (distance <= radius) {
                              const truckInfo = {
                                  applicant: truck.applicant || 'Unknown',
                                  facility_type: truck.facilitytype || 'Unknown',
                                  location_description: truck.locationdescription || '',
                                  address: truck.address || '',
                                  food_items: truck.fooditems || '',
                                  latitude: truckLat,
                                  longitude: truckLon,
                                  distance_miles: Math.round(distance * 100) / 100,
                                  status: truck.status || 'Unknown',
                                  permit: truck.permit || '',
                                  schedule: truck.schedule || ''
                              };
                              nearbyTrucks.push(truckInfo);
                          }
                      } catch (error) {
                          continue;
                      }
                  }
                  
                  // Sort by distance and limit results
                  nearbyTrucks.sort((a, b) => a.distance_miles - b.distance_miles);
                  const limitedTrucks = nearbyTrucks.slice(0, limit);
                  
                  return {
                      statusCode: 200,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          location: {
                              latitude: userLat,
                              longitude: userLon,
                              search_radius_miles: radius
                          },
                          total_found: limitedTrucks.length,
                          food_trucks: limitedTrucks
                      })
                  };
                  
              } catch (error) {
                  console.error('Error processing request:', error);
                  
                  if (error.message && error.message.includes('fetch')) {
                      return {
                          statusCode: 502,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          body: JSON.stringify({
                              error: 'Failed to fetch food truck data',
                              details: error.message
                          })
                      };
                  }
                  
                  return {
                      statusCode: 500,
                      headers: {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      body: JSON.stringify({
                          error: 'Internal server error',
                          details: error.message
                      })
                  };
              }
          };

          /**
           * Fetch data from URL using https module
           * @param {string} url - URL to fetch data from
           * @returns {Promise<Array>} - Parsed JSON response
           */
          function fetchData(url) {
              return new Promise((resolve, reject) => {
                  const request = https.get(url, (response) => {
                      let data = '';
                      
                      response.on('data', (chunk) => {
                          data += chunk;
                      });
                      
                      response.on('end', () => {
                          try {
                              const jsonData = JSON.parse(data);
                              resolve(jsonData);
                          } catch (error) {
                              reject(new Error(`Failed to parse JSON: ${error.message}`));
                          }
                      });
                  });
                  
                  request.on('error', (error) => {
                      reject(new Error(`Failed to fetch data: ${error.message}`));
                  });
                  
                  request.setTimeout(25000, () => {
                      request.destroy();
                      reject(new Error('Request timeout'));
                  });
              });
          }

          /**
           * Calculate the great circle distance between two points 
           * on the earth (specified in decimal degrees)
           * Returns distance in miles
           * 
           * @param {number} lat1 - Latitude of first point
           * @param {number} lon1 - Longitude of first point
           * @param {number} lat2 - Latitude of second point
           * @param {number} lon2 - Longitude of second point
           * @returns {number} - Distance in miles
           */
          function haversineDistance(lat1, lon1, lat2, lon2) {
              // Convert decimal degrees to radians
              const toRadians = (degrees) => degrees * (Math.PI / 180);
              
              const lat1Rad = toRadians(lat1);
              const lon1Rad = toRadians(lon1);
              const lat2Rad = toRadians(lat2);
              const lon2Rad = toRadians(lon2);
              
              // Haversine formula
              const dlat = lat2Rad - lat1Rad;
              const dlon = lon2Rad - lon1Rad;
              const a = Math.sin(dlat / 2) ** 2 + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dlon / 2) ** 2;
              const c = 2 * Math.asin(Math.sqrt(a));
              
              // Radius of earth in miles
              const r = 3956;
              
              return c * r;
          }

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FoodTruckLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${FoodTruckApi}/*/*'

  # API Gateway
  FoodTruckApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'food-truck-api-${Environment}'
      Description: 'API for finding nearby food trucks'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  FoodTrucksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FoodTruckApi
      ParentId: !GetAtt FoodTruckApi.RootResourceId
      PathPart: 'food-trucks'

  # API Gateway Method
  FoodTrucksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FoodTruckApi
      ResourceId: !Ref FoodTrucksResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.lat: true
        method.request.querystring.lon: true
        method.request.querystring.radius: false
        method.request.querystring.limit: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FoodTruckLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseHeaders:
            Access-Control-Allow-Origin: true
        - StatusCode: '400'
          ResponseModels:
            application/json: Empty
        - StatusCode: '500'
          ResponseModels:
            application/json: Empty

  # CORS OPTIONS Method
  FoodTrucksOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FoodTruckApi
      ResourceId: !Ref FoodTrucksResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseHeaders:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'GET,OPTIONS'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseHeaders:
            Access-Control-Allow-Origin: true
            Access-Control-Allow-Methods: true
            Access-Control-Allow-Headers: true

  # API Gateway Deployment
  FoodTruckApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - FoodTrucksMethod
      - FoodTrucksOptionsMethod
    Properties:
      RestApiId: !Ref FoodTruckApi
      StageName: !Ref Environment

  # CloudWatch Log Group
  FoodTruckLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/food-truck-finder-${Environment}'
      RetentionInDays: 14

Outputs:
  ApiUrl:
    Description: 'Food Truck API endpoint URL'
    Value: !Sub 'https://${FoodTruckApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/food-trucks'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref FoodTruckLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'
  
  ApiId:
    Description: 'API Gateway ID'
    Value: !Ref FoodTruckApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'